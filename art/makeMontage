#!/usr/bin/perl
# makeMontage - create a montage from the requested images
use strict;
use warnings;
#use Image::Magick;   # Can't get the mean through perlmagick
use Time::Local;
use List::Util qw( first min reduce );

if ( 4 != $#ARGV ) {
    print "makeMontage <means-file> <cols> <rows> <pattern mean file> <tone|hue>\n";
    exit;
}

# calculate the number of days we've been living through this
my $then = timelocal(0,0,0,13,2,2020);   # March 13, 2020 --- lockdown
my $now = time();
my $days = int( ($now - $then) / (24 * 60 * 60) );
#printf "then:%d now:%d days since:%d\n", $then, $now, $days;

my ( $meansfile, $cols, $rows, $patternname, $method ) = @ARGV;

my $filelist;
my $tilegeom = $cols."x".$rows;
my $tile = "-tile ".$tilegeom;
my $patternfile = $patternname."-".$cols."x".$rows.".means";
my $outfile = substr( $patternfile, 0, -6 )."-".$days."-".$method.".gif";

# Read the means file, and sort it.
my @lines;
open my $fh, '<', $meansfile || die;
chomp(@lines = sort byFirst <$fh> );
close $fh;

# Read the pattern means file.
my @plines;
open my $ph, '<', $patternfile || die;
chomp(@plines = <$ph> );
close $ph;

# For each location in the pattern, find the tile that's closest.
foreach ( @plines ) {
    $filelist.= findMatch( split / /, $_ ) ." ";
}
#print $filelist;

my $cmd = "montage +dither $filelist $tile -mode Concatenate $outfile";
#print "calling ".$cmd."...\n";
#exit;
system $cmd;

sub findMatch {
    my ( $m, $r, $g, $b ) = @_;
    my $match;
    
    if ( $method eq "tone" ) {
	$match = first { isLighter( $m, $_ ) } @lines;  # first lighter tile
    } else {
	$match = reduce { closestHue( $r, $g, $b, $_ ) } @lines;
    }
    if ( !$match ) { # if none use the lightest, ie, the last sorted one
	$match = $lines[-1];
    }
    my ( $tone, $red, $green, $blue, $file ) = split / /, $match; 
    $file;
}

# a numeric comparison on the first word in the line
sub byFirst {
    my ( $a1 ) = split / /, $a;
    my ( $b1 ) = split / /, $b;
    $a1 <=> $b1;
}

sub isLighter {
    my ( $pat_mean, $tile_line ) = @_;
    my ( $tile_mean ) = split / /, $tile_line;
    #print "is ".$tile_mean." >= ".$pat_mean."?\n";
    $pat_mean < $tile_mean;
}    

sub closestHue {
    my ( $pr, $pg, $pb, $tile_line ) = @_;
    my ( $am, $ar, $ag, $ab ) = split / /, $a;
    my ( $bm, $br, $bg, $bb ) = split / /, $b;
    my $adiff = abs($pr-$ar) + abs($pg-$ag) + abs($pb-$ab);
    my $bdiff = abs($pr-$br) + abs($pg-$bg) + abs($pb-$bb);
    $adiff < $bdiff ? $a : $b
}    
